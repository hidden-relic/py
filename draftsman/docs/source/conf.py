# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath("../.."))


# -- Project information -----------------------------------------------------

project = "factorio-draftsman"
copyright = "2022, redruin1"
author = "redruin1"

# The full version, including alpha/beta/rc tags
release = "0.3.5"


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    #'sphinx.ext.napoleon',
    "sphinx.ext.duration",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx_copybutton",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# Make type-hints in signatures use shortened names instead of fully qualified
autodoc_typehints_format = "short"
# Make autogenerated order equivalent to source order
autodoc_member_order = "groupwise"
# Keep class names simple
add_module_names = False

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

html_theme_options = {
    # TOC options
    "collapse_navigation": False
}

# Icon on output HTML
html_favicon = "../img/draftsman_icon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# html_logo = "something" # TODO

# html_css_files = [
#     'css/custom.css'
# ]

highlight_language = "python"


def setup(app):
    # Mostly just for readthedocs configuration pass
    # We check to see if the mods.pkl file exists
    # If it does, we ignore this step
    # If not, we run draftsman.env.update()
    # This ensures that the module is always setup before running autodoc, which is a must
    # Would be nice to just add a regular command in the readthedocs config, but that would be too simple
    import os.path
    import draftsman

    mods_pkl = os.path.join(draftsman.__path__[0], "data", "mods.pkl")
    print(mods_pkl)
    if not os.path.isfile(mods_pkl):
        from draftsman.env import update

        update(verbose=True)
